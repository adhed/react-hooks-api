{"version":3,"sources":["services/ApiService.ts","constants/api.ts","services/PostsService.ts","constants/posts.ts","utils/date.utils.ts","components/Comment/Comment.tsx","components/Loading/Loading.tsx","components/Post/Post.tsx","components/ErrorMsg/ErrorMsg.tsx","components/PostsList/PostsList.tsx","hooks/debounce.ts","components/Controls/Controls.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ApiService","url","fetch","then","response","ok","Error","statusText","json","API_URL","PostsService","getPosts","_getPosts","Object","asyncToGenerator","regenerator_default","a","mark","_callee","limit","wrap","_context","prev","next","concat","sent","abrupt","posts","stop","_x","apply","this","arguments","getPostComments","_getPostComments","_callee2","postId","_context2","comments","_x2","formatDate","date","Date","toLocaleDateString","Comment","props","react_default","createElement","className","data","author","name","raw_content","Loading","Post","_useState","useState","_useState2","slicedToArray","setComments","_useState3","_useState4","isLoading","setIsLoading","useEffect","loadComments","ID","newComments","title","dangerouslySetInnerHTML","__html","excerpt","href","URL","target","components_Loading_Loading","length","map","comment","components_Comment_Comment","key","ErrorMsg","msg","PostsList","setPosts","_useState5","_useState6","error","setError","debouncedPostsNumber","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","postsToShow","newPosts","catch","components_ErrorMsg_ErrorMsg","post","components_Post_Post","areCommentsEnabled","Controls","onSubmit","event","preventDefault","htmlFor","autoFocus","type","min","max","postsNumber","placeholder","onChange","onInputChange","parseInt","onClick","onLoadCommentsClick","App","setPostsNumber","setCommentsEnabled","components_Controls_Controls","components_PostsList_PostsList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb22a6a6.chunk.js","sourcesContent":["export const ApiService = {\n    makeApiCall<T>(url: string): Promise<T> {\n        return fetch(url)\n          .then((response: Response) => {\n            if (!response.ok) {\n              throw new Error(response.statusText)\n            }\n            return response.json() as Promise<T>\n          })\n      }\n}","export const API_URL: string = \"https://public-api.wordpress.com/rest/v1.1\";","import { ApiService } from \"./ApiService\";\nimport { API_URL, POSTS_WEBSITE } from \"../constants\";\nimport { IPost, FetchPostResponse, FetchCommentsResponse } from \"../models\";\nimport { IComment } from \"../models/comment\";\n\nexport const PostsService = {\n    async getPosts(limit: number): Promise<IPost[]> {\n        const response: FetchPostResponse = await ApiService.makeApiCall<FetchPostResponse>(\n            `${API_URL}/sites/${POSTS_WEBSITE}/posts/?number=${limit}`\n        );\n        return response.posts;\n    },\n\n    async getPostComments(postId: number): Promise<IComment[]> {\n        const response: FetchCommentsResponse = await ApiService.makeApiCall<FetchCommentsResponse>(\n            `${API_URL}/sites/${POSTS_WEBSITE}/posts/${postId}/replies/`\n        );\n        return response.comments;\n    }\n}","export const DEFAULT_NUMBER_OF_POSTS: number = 3;\nexport const MAX_NUMBER_OF_POSTS: number = 100;\n\nexport const POSTS_WEBSITE: string = \"en.blog.wordpress.com\";\n","export const formatDate = (date: string): string => {\n    if (date) {\n        return new Date(date).toLocaleDateString('en-US');\n    }\n\n    return 'Wrong date';\n}","import React from 'react';\nimport { IComment } from '../../models/comment';\nimport { formatDate } from '../../utils';\n\nimport './Comment.scss';\n\nexport interface CommentProps {\n    data: IComment;\n}\n\nconst Comment: React.FC<CommentProps> = (props: CommentProps) => {\n\n  return (\n    <div className=\"comment\">\n        <span className=\"comment__date\">({ formatDate(props.data.date) })</span>\n        <span className=\"comment__author\"> { props.data.author.name } said: </span>\n        <span className=\"comment__content\">{ props.data.raw_content }</span>\n    </div>\n  );\n}\n\nexport default Comment;\n","\nimport React from 'react';\n\nconst Loading: React.FC = () => {\n\n  return (\n    <div className=\"loading\">\n        <span className=\"loading__label\">Loading data...</span>\n    </div>\n  )\n}\n\nexport default Loading;\n","\nimport React, { useEffect, useState } from 'react';\nimport { IPost } from '../../models';\nimport { formatDate } from '../../utils';\nimport { PostsService } from '../../services';\nimport { IComment } from '../../models/comment';\nimport { Comment } from '../Comment';\nimport { Loading } from '../Loading';\n\nimport './Post.scss';\n\nexport interface PostProps {\n    data: IPost;\n    loadComments: boolean;\n}\n\nconst Post: React.FC<PostProps> = (props: PostProps) => {\n\n    const [comments, setComments] = useState<IComment[]>([]);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n\n\n    useEffect(() => {\n        setIsLoading(true);\n\n        if (props.loadComments) {\n            PostsService.getPostComments(props.data.ID)\n                .then((newComments: IComment[]) => {\n                    setComments(newComments);\n                    setIsLoading(false);\n                })\n        } else {\n            setComments([]);\n            setIsLoading(false);\n        }\n\n    }, [props.loadComments]);\n\n  return (\n    <div className=\"post\">\n        <h2 className=\"post__headline\">{ props.data.title }</h2>\n        <span className=\"post__description\">\n            <span className=\"post__author\">{ props.data.author.name }</span>\n            <span className=\"post__date\"> on { formatDate(props.data.date) }</span>\n        </span>\n\n        <div className=\"post__excerpt\" dangerouslySetInnerHTML={{__html: props.data.excerpt}}></div>\n        <a className=\"post__more-link\" href={props.data.URL} target=\"_blank\">read more</a>\n        \n        { isLoading ? <Loading /> : <div className=\"comments\">\n            { comments.length ? <span className=\"comments__headline\">Comments to this post:</span> : null }\n            {comments.map((comment: IComment) => {\n                return <Comment data={comment} key={comment.ID}></Comment>\n            })}\n        </div> }\n        \n    </div>\n  );\n}\n\nexport default Post;\n","import React from 'react';\n\nimport './ErrorMsg.scss';\n\ninterface ErrorMsgProps {\n    msg: string;\n}\n\nconst ErrorMsg: React.FC<ErrorMsgProps> = (props: ErrorMsgProps) => {\n\n  return (\n      <span className=\"error-msg\">{ props.msg }</span>\n  );\n}\n\nexport default ErrorMsg;\n","\nimport React, { useEffect, useState } from 'react';\nimport { PostsService } from '../../services';\nimport { IPost } from '../../models';\nimport Post from '../Post/Post';\nimport { Loading } from '../Loading';\nimport useDebounce from '../../hooks/debounce';\nimport ErrorMsg from '../ErrorMsg/ErrorMsg';\n\nexport interface PostsListProps {\n  postsToShow: number;\n  areCommentsEnabled: boolean;\n}\n\nconst PostsList: React.FC<PostsListProps> = (props: PostsListProps) => {\n\n  const [posts, setPosts] = useState<IPost[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const debouncedPostsNumber = useDebounce(props.postsToShow, 500);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setError('');\n  }, [props.postsToShow]);\n\n  useEffect(() => {\n    if (debouncedPostsNumber) {\n      setIsLoading(true);\n      PostsService.getPosts(props.postsToShow)\n        .then((newPosts: IPost[]) => {\n          setPosts(newPosts);\n          setIsLoading(false);\n        })\n        .catch(() => {\n          setError(`There's an error with the request. Type another number.`);\n          setIsLoading(false);\n        });\n    } else if (debouncedPostsNumber === 0) {\n      setIsLoading(false);\n      setError(`Posts limit should be greater than 0.`);\n    }\n  }, [debouncedPostsNumber]);\n\n  return (\n    isLoading ? <Loading /> :\n  \n    error ? <ErrorMsg msg={error} /> : \n    <div>\n        <div className=\"list\">\n          {posts.map((post: IPost) => {\n            return <Post key={post.ID} data={post} loadComments={props.areCommentsEnabled}></Post>\n          })}\n      </div>\n    </div>\n   \n  );\n}\n\nexport default PostsList;\n","import { useState, useEffect } from 'react';\n\nexport default function useDebounce(value: any, delay: number): any {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      return () => clearTimeout(handler);\n    }, [value]);\n\n  return debouncedValue;\n}","import React, { SyntheticEvent, ChangeEvent } from 'react';\nimport { DEFAULT_NUMBER_OF_POSTS, MAX_NUMBER_OF_POSTS } from '../../constants';\n\nimport './Controls.scss'\n\ninterface ControlsProps {\n    areCommentsEnabled: boolean;\n    postsNumber: number;\n    onLoadCommentsClick: () => void;\n    onInputChange: (value: number) => void;\n}\n\nconst Controls: React.FC<ControlsProps> = (props: ControlsProps) => {\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>): void => {\n        props.onInputChange(parseInt(event.target.value));\n      }\n    \n    const handleLoadCommentsClick = (): void => {\n        props.onLoadCommentsClick();\n    }\n\n    const handleFormSubmit = (event: SyntheticEvent): void => {\n        event.preventDefault();\n    }\n    \n    return (\n        <form className=\"form\" onSubmit={handleFormSubmit}>\n            <label className=\"form__label\" htmlFor=\"counter\">Limit of posts: </label>\n            <input autoFocus type=\"number\" min={1} max={MAX_NUMBER_OF_POSTS} value={props.postsNumber} name=\"counter\" placeholder=\"Limit of posts\" onChange={handleInputChange} className=\"form__input\" />\n            <button className=\"form__comments-button\" onClick={handleLoadCommentsClick}>\n            { props.areCommentsEnabled ? 'Hide comments' : 'Load comments' }\n            </button>\n        </form>\n    );\n}\n\nexport default Controls;\n","import React, { useState } from 'react';\nimport { PostsList } from './components';\nimport { DEFAULT_NUMBER_OF_POSTS } from './constants';\nimport Controls from './components/Controls/Controls';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n\n  const [postsNumber, setPostsNumber] = useState<number>(DEFAULT_NUMBER_OF_POSTS);\n  const [areCommentsEnabled, setCommentsEnabled] = useState<boolean>(false);\n\n  const handleInputChange = (value: number): void => {\n    setPostsNumber(value);\n    setCommentsEnabled(false);\n  }\n\n  const handleLoadCommentsClick = (): void => {\n    setCommentsEnabled(!areCommentsEnabled);\n  }\n\n  return (\n    <div className=\"container\">\n      <Controls areCommentsEnabled={areCommentsEnabled} postsNumber={postsNumber} onInputChange={handleInputChange} onLoadCommentsClick={handleLoadCommentsClick} />\n      <PostsList postsToShow={postsNumber} areCommentsEnabled={areCommentsEnabled} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/reset.scss';\nimport './styles/main.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}